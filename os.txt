
Filesystems:
------------
	Filesystems are not hierarchical.

	The virtual filesystem layer exposes only data, no metadata.  Every file is
	just a stream of bytes, with an inherent length.  No filenames or directory
	structure are inherent to a file.  Metadata must be stored in another file
	using a data serialization format.  Internal record-keeping metadata (e.g.
	inodes in UNIX-style filesystems) are not visible to the user through the
	VFS; instead the data is structured using a schema inspired by camlistore:
		- Data is stored in blobs, and a file can be the concatenation of
		  several blobs.
		- A static file is reference by a permanode, which is an immutable,
		  signed block containing a UUID.
		- The content referenced by the permanode is determined by attribute
		  blobs referencing the permanode, and specifying the hash of blobs that
		  make up the content.
	Filesystems employ reference-counting to clean up any blobs that are no
	longer accessible.  Filesystem drivers are just blob servers, while the
	file server portion is implemented generically by the VFS.  Blob servers
	keep track of and verify blob hashes, as well as the reference count passed
	to them by the file server.  The file server is built into the kernel and is
	responsible for verifying consistency of files.

	Directories are arbitrary methods of organization, and not useful to the
	majority of applications.  A shell can instead add metadata to a user's
	files to organize and expose them to the user in any fashion they like.

	Some special filesystems include a tmpfs and a cachefs.  The tmpfs ensures
	files never touch a backing store, while the cachefs keeps files in an LRU
	and frees up space when there is pressure to do so.  A cachefs could also
	be a tmpfs.

	Filesystems must carry some well-defined guarantee on consistency.

Processes:
----------
	A process is an instance of a program binary. Processes serve only to act on
	files.

	Mandatory access control is implemented for each process: each process has a
	set of visible files, and child processes have their set of files chosen by
	their parent.  Metadata files exposed to the child process (which could
	determine things like directory structure) could be different than those
	used by the parent.  The requested files and their structure are generally
	specified in a well-defined format in the program binary.

	Processes have a private, copy-on-write map of their program binary,
	meaning if a parent process edits the program binary of any running
	process(es) it does not affect any program instance.  The parent
	determines what backing store is used for the COW instance (must be the
	same or higher tier of storage).

	Processes aim to survive reboots (i.e. have their private COW binary copy
	on a persistent backing store), with ephemeral resources stored on temporary
	filesystems to signify that processes should always check their
	condition before use.

System calls:
-------------
	Only file-handling calls: read and write.

	Extra system functions are available via file manipulations within a
	pseudo-filesystem.  This way a parent process can easily restrict a child
	process to a set of system functions, by only giving it visibility to
	specific system files.

	I/O calls take as parameters the hash of the file in question, the address
	of the string to be read or written, the length of said string, and the
	address they are to be read or written into.  Optional parameters can
	specify the blocking behaviour of the call.

IPC/sockets:
------------
	A system file can be used to turn a shared file into a buffer/pipe, where
	one process is the reader and some other(s) is/are the writer.  A reader
	reads the file starting at address 0, for a certain buffer length, and the
	call blocks until the writer(s) have filled up that many bytes in the
	buffer.  Writers also just arbitrarily write to address 0---the system
	determines the actual address placement for multiple writes in a row.  As
	soon as the buffer length requested by the reader is filled, the call
	returns on the reader and the next call on the writer blocks.

Modules/drivers:
----------------
	Almost everything is userspace.  Binaries for hardware drivers are
	selected by the kernel and get special file mappings that represent ranges
	of DMA addresses.  Filesystem drivers get mapped an applicable portion of
	the pagecache.  Network drivers get mapped sockets that represent input or
	output bitstreams.

Character set:
--------------
	ASCII/Unicode has some annoyances, in particular its messy mingling of
	control codes with printable characters.  I would prefer a single control
	escape code, with a separate mapping table of control codes, and less
	ambiguity in said codes (no 8 bazillion codes for whitespace, each with
	idiosyncratic implementation).

