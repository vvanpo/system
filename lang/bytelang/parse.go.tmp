package bytelang

import (
	"bufio"
	"io"
	"log"
	_ "unicode"
)

type parser struct {
	*bufio.Reader
	bytelang
}

func newParser(r io.Reader) (p *parser) {
	p = &parser{Reader: bufio.NewReader(r)}
	return
}

func (p *parser) next() (c byte) {
	c, err := p.ReadByte()
	if err != nil {
		log.Fatal(err)
	}
	return
}

func (p *parser) read(n int) (s string) {
	b := make([]byte, n)
	if _, err := p.Read(b); err != nil {
		log.Fatal(err)
	}
	s = string(b)
	return
}

func (p *parser) parseWord() (word uint) {
	b := p.read(p.wordLength)
	for i := 0; i < len(b); i++ {
		word |= uint(b[i])
		word <<= 8
	}
	return
}

func (p *parser) parseBytelang() {
	p.parseHeader()
}

func (p *parser) parseHeader() {
	match := "Version 0.0\nArch.: "
	if match != p.read(len(match)) {
		log.Fatal("Invalid header string")
	}
	c, err := p.ReadString(' ')
	if err != nil {
		log.Fatal(err)
	}
	for i := 0; i < len(c)-2; i++ {
		if c[i] < byte('0') || c[i] > byte('9') {
			log.Fatal("Invalid word-length definition")
		}
		p.wordLength = (p.wordLength * 10) + int(c[i]-byte('0'))
	}
	match = "bytes/word\n"
	if match != p.read(len(match)) {
		log.Fatal("Invalid header string")
	}
}

//func (p *parser) parseIdentifier() (id string) {
//	for i, r := range id {
//		if r == '_' || unicode.IsLetter(r) || (unicode.IsDigit(r) && i != 0) {
//			continue
//		}
//		log.Fatal("Invalid identifier")
//	}
//	for _, s := range p.identifier {
//		if s == identifier(id) {
//			log.Println("Duplicate identifier")
//		}
//	}
//	p.identifier = append(p.identifier, identifier(id))
//}
