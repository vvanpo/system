
file = stmt, { stmt }
stmt = simple_stmt | compound_stmt
compound_stmt = label, ( func_def | if_stmt | block )
	func_def = "func", [ params ], [ "->", params ], block
	block = indent, file, dedent
	if_stmt = "if", expr, block
simple_stmt = [ label ], ( autovar_stmt
							| alias_stmt
							| assign_stmt
							| jump_stmt
							| return_stmt )
	autovar_stmt = param, ":=", expr
	alias_stmt = param, ":", expr
	assign_stmt = identifier, { ",", identifier }, "=" expr
	jump_stmt = "jump", expr
	return_stmt = "return"

label = identifier, ":"
param = [ type ], identifier, { ",", [ type ], identifier }
type = "byte" | ( "block", literal )
expr = expr, [ expr ], operator | value			// Ambiguous, need to know operator arity
	value = func_call | identifier | literal
	func_call = "(", { expr }, identifier, ")"

