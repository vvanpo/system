
Types:
------
	Types are defined by their structure in memory, and the operations available
	for them.  The structure can be a set or variable length in bits, with a
	specific alignment or not (stack-aligned, cacheline-aligned, etc.), and
	possibly disjoint with variable-sized pieces.  Operations are defined as
	functions.
	Types 'word' and 'byte' are implicitly defined in every program, because
	they are architecture-dependent.

	Types are required on variable initialization, but can also be used with
	literals.  'int 10' might result in a different memory representation than
	'float 10'.  Normally, literals inherit the type of the variable they are
	assigned to and don't require an explicit type declaration.

Operations:
-----------
	Operations are defined in type definitions.  Operations can be inherited or
	referenced from other types.  Defining operations requires specifying a
	grammar that is non-conflicting with existing grammars, and specifying the
	exact effect on memory that the operation has.  Operations can modify the
	data of its operands, allocate new memory and return a value, or both.
	Immutable types are those that only have operations that strictly return
	values without modifying their operand's data.

Functions:
----------
	Functions are a type.  They are the length of a single address, being where
	the function begins, no alignment requirements, and the only operation is the
	call operation.  Syntax for definition is:

	func < parameters > -> < return values >
		< statements >

	The data that makes up the function instructions is stored in a code segment,
	of which there is only one per process.  The code segment is managed by the
	compiler, and generally has no need to be mutable.

	To implement an 'eval'-esque function, it would be necessary to link a
	compiler into the code segment, and use it to compile functions at run-time
	into a new code segment.  As calling functions from a new segment results
	in new processes, the eval function would need to set up an entrance hook
	to inherit the existing environment (i.e. approximately what UNIX' 'fork'
	does).

Variables:
----------
	Variables are placeholders for a type, and a location.  New identifiers
	require a type and result in automatic allocation on the stack, regardless
	of whether a value was assigned or not.
	The exception is when an identifier uses the colon syntax to attach itself
	to a specific location.  In general, this is only useful for functions.

	func f: x -> y
		< statements >
	
	Regular assignment uses a left arrow.

	int a <- 10
	func f: x -> y
		y <- x
		return
	int v <- f a

	The above example places value 10 in variable 'a', declares 'f' to point to
	the start address of the defined function, and then places in 'v' the value
	returned by 'f' when passed the argument 'a'.  The resultant value in 'v'
	is 10.

If statement:
-------------
	A zero expression results in a branch skipping the statement-block.

	if < expression >
		< statements >

Function calls:
---------------
	Just like sh-derivatives (bash, ash, ksh, etc.), calling a function is as
	simple as writing its identifier.  This complicates definitions of anonymous
	functions, as there is an ambiguity between defining a function and calling
	one.  The solution is that context determines when they are called;
	aliasing to a variable or passing as an argument (assigning to an argument
	variable) results in a simple definition, while otherwise the lambda is
	called immediately (like in a thread statement).

	h a b c
	v: callback {
		func a -> b
			b: a + 1
			return
		} 7

Threads:
--------
	New threads get a fresh stack, they copy/save no state from the calling
	environment.

	thread < function call >

Segments:
---------
	A segment is the principal unit for IO.  Address references must always be
	prefaced with a segment name, and cannot fall outside the segment bounds.
	Segments are mapped regions of memory, and runtime procedures are inserted
	anywhere that dynamic bounds-checking is required.
	Segments are treated as mutable lists, and can thus be used as stacks or
	queues.  The segment function initializes a new segment:

	segment ( < name > | < path > )

	A process is defined by its code segment.  Function calls to another
	segment cause a new process/address space to be created, with the calling
	thread blocking until the new process returns.  A process cannot return
	until all its threads have returned, i.e. it will block on the main
	function's return statement until all threads have returned.
	Processes inherit no state from the caller other than the segments passed.

Channels:
---------
	Buffered and unbuffered channels are managed by the runtime and possibly
	the kernel to provide synchronous communication between threads and
	processes.  They exist in a runtime-managed segment.

	channel < name > [ < buffer length > ]

Error handling:
---------------
	Every function definition is accompanied by a table of its inputs and
	outputs.  Inputs include arguments, and any non-local variables referenced
	in the function.  Any read from another segment is considered an input.
	Outputs consist of return values, and writes to other segments or
	non-local variables.
	For each corresponding input and output is listed a set of acceptable
	values, and error handling functions are defined for the ranges of
	unacceptable values.

