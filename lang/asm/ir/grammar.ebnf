
instruction =   mnemonic, width, source, dest
    mnemonic =  "mov"       ; move from source to dest
                | "add"
                | "sub"
                | "mul"
                | "div"
                | "not"
                | "and"
                | "or"
                | "xor"
                | "ror"
                | "rol"
                | "shr"
                | "shl"
                | "data"    ; special data 'instruction', taking an offset and a string or number as operands
    width =     hex 
    source =    immediate | register | address
        immediate = number
    dest =      register | address
    ; value in register
    register =  "_ip" | "_sp" | "_fp"
    address =   reference | pointer
        ; value in memory address
        reference = "&", hex
        ; value in address pointed to by register or address
        pointer =   "*", register, [ ( "+" | "-" ), hex ]
    number =    [ "-" ], hex
    hex =       { "a".."f" | "0".."9" }-

; This needs a re-do; not all addressing modes should be available for every
; instruction, and every operand.  Fewer addressing modes per instruction
; allows for shorter instructions.  If ever we want a binary format (a la
; bytecode) this will be useful.
